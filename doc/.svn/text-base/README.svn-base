##########################################
##		  FASH
##	   Fritz Again SHell
##
## Author: David Fritz
## Date: 04/22/10
## Revision: 1.11.2
##########################################

The Fritz Again Shell (FASH) is a lightweight but powerful 
mimic of the Unix BASH. In this README you will learn how 
to use the various features of FASH.

############################################
# TO BE ADDED (FUTURE ADDITIONS)
############################################
FASH is a work in progress. Here are some features that will
definitely be added in a future version:
	1. better redirection (include using &> and i>&j style notations)
	2. background processes
	
And here are some features FASH might have in a future version:
	1. consecutive program execution (program1;program2)	

############################################
# INTRODUCTION - How to compile and run FASH
############################################
To compile FASH just run the following command in /trunk/src:
	$ make

This will create an executable called "fash" in the same directory.
To execute FASH just run:
	$ ./fash
after compiling.

########################################
# USAGE - How to run a command
########################################
To run a command in FASH, you use the same procedure you would while
using BASH. Just type in a command followed by any arguments and press
enter. For example, to list the files in a directory with the long
listing format, just type
	$ ls -l
and press enter. You will see a listing the same output as if you had
run the command in BASH.

########################################
# USAGE - How to browse command history
########################################
To browse your command history, just use the arrow keys like you would
using BASH. The up arrow key will browse through previous commands, and
the down arrow key will iterate back foward through your commands. If you
want to execute a command after selecting it using the arrow keys, just
press enter.

You can view a listing of all your history items (number of history items
is set in the COM_HISTORY variable which is described later) by using the
following command:
	$ history
This will print a numbered list of previously issued commands, and will
look something like this:
	1 ps
	2 ls -l
	3 grep "John" email.txt
	4 echo Hello
	5 history
where the most recent command will always be "history".

You can also execute a command in history by using its index number
(from the printed history list). For example, using the previous
history list, if you wanted to execute the 2nd item in history,
just type:
	$ !4
and press enter. FASH will print the command that was represented by
that index so you know which command was run, and then will execute that
command. Using our example and running that command, the output of 
FASH will look like:
	$ !4
	echo Hello
	Hello
	$ 

###########################################
# USAGE - How to browse navigation history
###########################################
FASH also has the ability to keep track of your current working directories
(CWD) whenever you change directories. You can view a list (similar to
the command history) of your CWD's by using the following:
	$ navhist
This will print a numbered list of previou CWD's, and will look something
like this:
	1 /home/CENTRE/user.name/repositories/sushi
	2 /home/CENTRE/user.name/repositories
	3 /home/CENTRE/user.name/Desktop
	4 /home/CENTRE/user.name/Desktop/pictures

You can immediately change your CWD to any CWD in the navigation history
by using a command that is very similar to command history. For example,
using our previous list as a reference, issuing the following:
	$ @3
will immediately change your CWD to "/home/CENTRE/user.name/Desktop"

########################################
# USAGE - How to use aliases
########################################
Just like BASH, FASH has the ability to set and unset aliases. To set an
alias in FASH, you use the same procedure as BASH:
	$ alias ls="ls --color=auto"
Now, whenever you run the command "ls" the command "ls --color=auto" will
be run instead.

To view all aliases that you have set, just run:
	$ alias
with no argument and a list of all aliases will be printed like this:
	$ alias
	alias ls="ls --color=auto"
	alias h="history"
	alias nav="navhist"

To unset an alias, you use the command "unalias" just like BASH. For
example, if you wanted to unset the alias for "ls", you would run:
	$ unalias ls
and now "ls" is just "ls" again.

###########################################
# USAGE - How to redirect stdin and stdout
###########################################
Redirection is practically the same in FASH as it is in BASH.
To redirect stdout, you can use either ">" or ">>" depending
on whether you want to overwrite/create a file or create/append
a file. For example, to save the list of currently running processes
to a file called "processes.txt" you could use:
	$ ps > processes.txt
If you wanted to append a new list of processes to an already existing
list, you could run:
	$ps >> processes.txt
which will append the output of "ps" to "processes.txt" if it exits, or
create it if it doesn't.

Redirecting stdin is the same procedure, but using "<". For example,
lets say you want to search for the word "Oldham" in a file called
"professors.txt". You could use:
	$ grep "Oldham" < professors.txt

###########################################
# USAGE - Piping
###########################################
Piping in FASH is nearly identical to piping in BASH.
To pipe the output of one command into the input of another, just type:
	$ program1 | program2
This can be used for two or more commands. For example,
	$ ls | sort | grep "c" | grep "hist"
	
###########################################
# USAGE - Tab completion
###########################################
FASH has some very basic tab completion functionality that is
unfortunately very limited. 

FASH tab completion can do two things essentially:
	1. it can complete any unique match (for things in CWD)
	2. it can store non-unique matches and print them
For example, lets say the file "emails.txt" was in our CWD, then
you could type
	$ cat ema
and then press <TAB> to have FASH complete your line to:
	$ cat emails.txt

Lets say that you have 3 files called "emails.txt", "email_bob.txt",
and "email_from_work.txt" in your CWD, if you type:
	$ vi ema
followed by a <TAB>, FASH will find the three files, but it won't know
which to complete. You can view the files it finds by immediately
pressing <TAB> a second time. Here's what the whole runthrough would
look like:
	$ vi ema<TAB><TAB>
	emails.txt	email_bob.txt	email_from_work.txt
	$ 

###########################################
# USAGE - Configuration file
###########################################
FASH has the ability to read settings from a configuration file similar
to the way BASH will read settings in .bashrc and .bash_profile

To use a configuration file, create a file in the same directory as the
FASH executable, and name it ".fashrc"

Inside the .fashrc file, the following things may be set:
	1. PROMPT (the prompt character)
	2. COM_HIST (the # of commands to keep in history)
	3. NAV_HIST (the # of CWDs to keep in navigation history_
	4. aliases
So lets say, for example, you wanted FASH to always only keep 10 items
in both your command and navigation history, you want the prompt character
to be "::--" and you want to set the aforementioned "ls" alias. Here's what 
your .fashrc file will look like
	PROMPT=::--
	COM_HIST=10
	NAV_HIST=10
	alias ls="ls --color=auto"

###########################################
# USAGE - C Interpreter
###########################################
FASH actually has a feature that BASH does not have, and that is the FASH
C interpreter. With FASH, you can enter a valid C program and have it
execute right inside the shell! To bring up the C interpreter run:
	$ cinterp
The C interpreter will start and give you some basic instructions on its
usage. You can begin writing your valid C program line by line, but beware;
you can not edit previously entered lines! When you are finished writing a
program, type "done" on a line by itself, and if your code has no bugs, it 
will then execute and return you back to a standard FASH prompt. If there are
problems, GCC will print out the errors, but you will have to retype the program
from scratch. If at any time you wish to quit the C interpreter, just type "quit"
on a line by itself and you will be returned to a standard FASH prompt.

There are some obvious limitations to this C interpreter, but as you can see,
it would be very useful to write a quick C program and see the output.
